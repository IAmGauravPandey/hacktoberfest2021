int n, height;
vector<vector<int>> G, up;
int timer;
vector<int> tin, tout;
void dfs(int v, int p = 0)
{
	tin[v] = ++timer;
	up[v][0] = p;
	for (int i = 1; i <= height; i++)
		up[v][i] = up[up[v][i - 1]][i - 1];
	for (int u : G[v])
	{
		if (u != p)
		{
			dfs(u, v);
		}
	}
	tout[v] = ++timer;
}
// u is ancesstor of v or not?
bool is_ancestor(int u, int v)
{
	return tin[u] <= tin[v] and tout[u] >= tout[v];
}
int lca(int u, int v)
{
	if (is_ancestor(u, v))
		return u;
	if (is_ancestor(v, u))
		return v;
	for (int i = height; i >= 0; i--)
	{
		if (!is_ancestor(up[u][i], v))
			u = up[u][i];
	}
	return up[u][0];
}

int kthancestor(int u, int k)
{
	for (int i = 20; i >= 0; i--)
	{
		if (k >= (1 << i))
		{
			u = anc[u][i];
			k -= (1 << i);
		}
	}
	if (!u)
		return -1;
	return u;
}

void preprocess(int root)
{
	tin.resize(n + 1);
	tout.resize(n + 1);
	timer = 0;
	height = 20;
	up.assign(n + 1, vector<int>(height + 1));
	dfs(root, -1);
}
